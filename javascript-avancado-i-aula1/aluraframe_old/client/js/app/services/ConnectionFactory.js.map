{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","close","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;;yCAEJC,iB;AAEL,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAACf,UAAJ,EAAgB;AACZA,iDAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAE,4CAAQhB,WAAWgB,KAAX,CAAiBC,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWgB,KAAX,GAAmB,YAAW;AACxB,8CAAM,IAAId,KAAJ,CAAU,4CAAV,CAAN;AACL,qCAFD;AAGH;AACDE,wCAAQJ,UAAR;AACH,6BAVD;;AAYAM,wCAAYY,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYR,EAAEC,MAAF,CAASQ,KAArB;;AAEAhB,uCAAOO,EAAEC,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AAEH,6BAND;AAQH,yBA9BM,CAAP;AA+BH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH;;;sDAEuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACVgB;AACAhB,yCAAa,IAAb;AAEH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\n\nexport class ConnectionFactory {\n    \n        constructor() {\n    \n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n    \n        static getConnection() {\n    \n            return new Promise((resolve, reject) => {\n    \n                let openRequest = window.indexedDB.open(dbName,version);\n    \n                openRequest.onupgradeneeded = e => {\n    \n                    ConnectionFactory._createStores(e.target.result);\n    \n                };\n      \n                openRequest.onsuccess = e => { \n    \n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                              throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    }\n                    resolve(connection);\n                };\n      \n                openRequest.onerror = e => {  \n                    \n                    console.log(e.target.error);\n    \n                    reject(e.target.error.name);\n    \n                };            \n    \n            });\n        }\n    \n        static _createStores(connection) {\n    \n            stores.forEach(store => {\n        \n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n\n        static closeConnection(){\n\n            if(connection){\n                close();\n                connection = null;\n        \n            }\n        }\n}\n"]}