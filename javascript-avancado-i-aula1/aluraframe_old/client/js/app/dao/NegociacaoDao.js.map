{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AAEjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEiB,WAFjB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,oCAAQI,SAAR,GAAoB,UAACC,CAAD,EAAO;;AAEvBP;AACH,6BAHD;;AAKAE,oCAAQM,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAlBM,CAAP;AAmBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACc,WADd,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZiB,UAHY,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACpB,oCAAIU,QAAQT,EAAEI,MAAF,CAASM,MAArB;;AAEA,oCAAGD,KAAH,EAAU;;AAEN,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEAP,0CAAMQ,QAAN;AAEH,iCARD,MAQO;;AAEH;AACA;;AAEAxB,4CAAQe,WAAR;AACH;AACJ,6BAlBD;;AAoBAF,mCAAOL,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAKH,yBAlCM,CAAP;AAmCH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,kCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQM,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAKH,yBAdM,CAAP;AAgBH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n\n    constructor(connection) {\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n\n        return new Promise((resolve, reject) => {\n\n            let request = this\n                ._connection\n                .transaction([this._store],\"readwrite\")\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = (e) => {\n\n                resolve();\n            };\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject('Não foi possível adicionar a negociação');\n            };                \n        });\n    }\n\n    listaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            let cursor = this._connection\n            .transaction([this._store],\"readwrite\")\n            .objectStore(this._store)\n            .openCursor();\n\n            let negociacoes = [];\n                    \n            cursor.onsuccess = e => {\n                let atual = e.target.result;\n\n                if(atual) {\n\n                    let dado = atual.value;\n\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n\n                    atual.continue();\n\n                } else { \n\n                    // quando não há mais objects em nossa store.\n                    // Isso significa que já terminados de popular negociacoes\n\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível listar as negociações');\n            };\n    \n        });\n    }\n\n    apagaTodos() {\n\n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve('Negociações apagadas com sucesso');\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível apagar as negociações');\n            }; \n\n        });\n\n    }\n}"]}